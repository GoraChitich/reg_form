{"version":3,"sources":["models/utils.js","models/Record.js","TableChangeServiceView.js","components/StrTable/StrTable.js","components/Form/Form.js","components/FormUpdate/FormUpdate.js","components/DeleteOrder/DeleteOrder.js","App.js","reportWebVitals.js","index.js"],"names":["generateID","Math","floor","random","Date","now","getDateFromFormat","dateFormat","Number","substr","Record","props","this","firstname","lastname","email","phone","birthdate","birthDate","isVisible","id","idRow","visible","TableChangeServiceView","url","settings","sheet","idOrder","a","axios","get","record","dbType","index","emailOwner","actualDate","actualTime","options","method","headers","data","number","birt—ÄDate","then","res","console","log","catch","er","delete","StrTable","params","useState","setFirstName","setLastName","setEmail","setPhone","setBirthdate","useEffect","funcCallBack","className","onClick","deleteRecord","htmlFor","class","type","name","value","onChange","e","target","required","selected","date","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","shouldCloseOnSelect","Form","propsID","update","state","records","googleTab","isTableFilled","isUpdate","maxCountOfPersons","regButton","regButtonCaption","actualPersonNumber","persons","redirect","changeOfPersons","bind","presetRegistryButton","submitHandler","tableChangeServiceView","getRecords","result","map","element","setState","regEmail","error","event","length","preventDefault","submitHandlerUpdate","submitHandlerAdd","forEach","insertRecord","emailjs","user_id","templateParams","from_name","to_name","service_id","templateUpdate_id","response","status","text","err","link_delete","site","host","link_update","templateAdd_id","item","key","delAppointment","items","newArray","splice","onSubmit","onSelect","checked","concat","Component","FormUpdate","useLocation","hash","replace","DeleteOrder","deleted","setDeleted","App","basename","process","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.034bcbea.chunk.js","sourcesContent":["\r\nexport function generateID() {\r\n\treturn `${Math.floor(Math.random() * 10000)}-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\r\n}\r\n\r\nexport function getDateFromFormat(dateFormat){\r\n\treturn new Date(Number(dateFormat.substr(0,4)),Number(dateFormat.substr(5,2))-1,dateFormat.substr(8,2))\r\n}","import { generateID, getDateFromFormat } from \"./utils\";\r\n\r\nclass Record {\r\n\r\n    constructor(props) {\r\n        if (props) {\r\n            this.firstname = props.firstname;\r\n            this.lastname = props.lastname;\r\n            this.email = props.email;\r\n            this.phone = props.phone;\r\n            //2021-06-07\r\n            this.birthdate = getDateFromFormat(props.birthDate);\r\n            this.isVisible = \"???\";\r\n            this.id = props.idRow;\r\n  \r\n        } else {\r\n            this.firstname = '';\r\n            this.lastname = '';\r\n            this.email = '';\r\n            this.phone = '';\r\n            this.birthdate = '';\r\n            this.isVisible = '';\r\n            this.id = generateID();\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * set a content of record\r\n     * @param {*} firstname \r\n     * @param {*} lastname \r\n     * @param {*} email \r\n     * @param {*} phone \r\n     * @param {*} birthdate \r\n     */\r\n    createRecord(firstname, lastname, email, phone, birthdate, visible) {\r\n        this.firstname = firstname;\r\n        this.lastname = lastname;\r\n        this.email = email;\r\n        this.phone = phone;\r\n        this.birthdate = birthdate;\r\n        this.visible = visible;\r\n        this.id = generateID();\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default Record;","import axios from \"axios\";\r\nimport dateFormat from 'dateformat';\r\nimport settings from './settings.json'\r\n\r\nclass TableChangeServiceView {\r\n\tconstructor() {\r\n\t\tthis.url = settings.sheet;\r\n\t}\r\n\r\n\tasync getRecords(idOrder) {\r\n\t\treturn await axios.get(`${this.url}/idOrder/${idOrder}`);\r\n\t}\r\n\r\n\tinsertRecord(record, dbType, index, idOrder, emailOwner, actualDate, actualTime) {\r\n\t\tswitch (dbType) {\r\n\t\t\t// insert direct to google table\r\n\t\t\tcase 1: {\r\n\t\t\t\tlet dataRequest = [{\r\n\t\t\t\t\tnumber: index,\r\n\t\t\t\t\tfirstname: record.firstname,\r\n\t\t\t\t\tlastname: record.lastname,\r\n\t\t\t\t\tphone: record.phone,\r\n\t\t\t\t\temail: record.email,\r\n\t\t\t\t\tbirt—ÄDate: dateFormat(record.birthdate, \"yyyy-mm-dd\"),\r\n\t\t\t\t\tidRow: record.id,\r\n\t\t\t\t\tidOrder,\r\n\t\t\t\t\temailOwner,\r\n\t\t\t\t\tactualDate: dateFormat(actualDate, \"yyyy-mm-dd\"),\r\n\t\t\t\t\tactualTime\r\n\t\t\t\t}];\r\n\t\t\t\t// send data to table that was booked\r\n\t\t\t\tlet options = {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\theaders: { \"content-type\": \"application/json\" },\r\n\t\t\t\t\tdata: dataRequest,\r\n\t\t\t\t\turl: this.url\r\n\t\t\t\t};\r\n\t\t\t\taxios(options).then(res => {\r\n\t\t\t\t\tconsole.log(\"the data was added in the table \", res.data);\r\n\t\t\t\t}).catch(er => {\r\n\t\t\t\t\tconsole.log(\"no data sorry \", er);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// insert to database\r\n\t\t\tdefault: {\r\n\t\t\t\t//\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tasync deleteRecord(id, dbType) {\r\n\t\tswitch (dbType) {\r\n\t\t\tcase 1: {\r\n\t\t\t\treturn await axios.delete(`${this.url}/idOrder/${id}`)\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\t//\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// /**\r\n\t//  * make uodate\r\n\t//  * depend on dbType\r\n\t//  * for google tables is 1\r\n\t//  * @param {} record \r\n\t//  * @param {*} dbType\r\n\t//  */\r\n\t// updateRecord(record, dbType) {\r\n\t// \tswitch (dbType) {\r\n\t// \t\tcase 1: {\r\n\t// \t\t\tlet url = `${this.url}/${this.state.numberUpdate - 1}`;\r\n\t// \t\t\tlet dataRequest = [{ number: record.numberUpdate, firstname: record.firstname, lastname: record.lastname, phone: record.phone, email: record.email, birhtDate: record.birhtDate }];\r\n\t// \t\t\tlet options = {\r\n\t// \t\t\t\tmethod: \"PATCH\",\r\n\t// \t\t\t\theaders: { \"accept\": \"application/json\", \"content-type\": \"application/json\" },\r\n\t// \t\t\t\tdata: dataRequest,\r\n\t// \t\t\t\turl\r\n\t// \t\t\t};\r\n\t// \t\t\taxios(options).then(res => {\r\n\t// \t\t\t\tconsole.log(\"the data was updated for row \", this.state.numberUpdate);\r\n\t// \t\t\t}).catch(er => {\r\n\t// \t\t\t\tconsole.log(\"error on update \", er);\r\n\t// \t\t\t});\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n}\r\n\r\nexport default TableChangeServiceView;","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport './StrTable.css';\r\n\r\nexport default function StrTable(params) {\r\n    const [firstname, setFirstName] = useState(params.record.firstname);\r\n    const [lastname, setLastName] = useState(params.record.lastname);\r\n    const [email, setEmail] = useState(params.record.email);\r\n    const [phone, setPhone] = useState(params.record.phone);\r\n    const [birthdate, setBirthdate] = useState(params.record.birthdate);\r\n\r\n    useEffect(()=>{\r\n        params.funcCallBack({firstname, lastname, email, phone, birthdate, isVisible: params.record.isVisible, id: params.record.id});\r\n    });\r\n\r\n    return (\r\n        <div className=\"strtable-c\">\r\n            <div className=\"title\"> \r\n                <h2>{`Person # ${params.index+1}`}</h2> \r\n                <button onClick={params.deleteRecord}>Delete</button>\r\n            </div>\r\n            <div className='input-div1'>\r\n                <label className='label1' htmlFor='firstname{index}'>Vorname <span class=\"reqsymbol\">*</span></label>\r\n                <input type='text' name=\"firstname{index}\" id='firstname{index}' className='input1' value={firstname} onChange={(e) => setFirstName(e.target.value)} required />\r\n                {/* <input type='text' name=\"firstname{index}\" id='firstname{index}' className='input1' value={record.firstname} onChange={this.handleChangeFirstName} required /> */}\r\n            </div>\r\n            <div className='input-div2'>\r\n                <label className='label2' htmlFor='lastname1'>Name <span class=\"reqsymbol\">*</span></label>\r\n                <input type='email' name='lastname{index}' id='lastname{index}' className='input1' value={lastname} onChange={(e) => setLastName(e.target.value)} required />\r\n                {/* <input type='text' name='lastname{index}' id='lastname{index}' className='input1' value={record.lastname} onChange={this.handleChangeLastName} required /> */}\r\n            </div>\r\n            <div className='input-div3'>\r\n                <label className='label3' htmlFor='email1'>Email <span class=\"reqsymbol\">*</span></label>\r\n                <input type='text' name='email{index}' id='email{index}' className='input1' value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n                {/* <input type='text' name='email{index}' id='email{index}' className='input1' value={record.email} onChange={this.handleChangeEmail} required /> */}\r\n            </div>\r\n            <div className='input-div4'><label className='label4' htmlFor='phone{index}'>Telefon<span class=\"reqsymbol\">*</span></label>\r\n                <input type='text' name='phone{index}' id='phone{index}' className='input1' value={phone} onChange={(e) => setPhone(e.target.value)} required />\r\n                {/* <input type='text' name='phone{index}' id='phone{index}' className='input1' value={record.phone} onChange={this.handleChangePhone} required /> */}\r\n            </div>\r\n            <div className='input-div5'><label className='label5' htmlFor='birthdate{index}'>Geburtsdatum<span class=\"reqsymbol\">*</span></label>\r\n                <DatePicker name='birthdate{index}' id='birthdate{index}' selected={birthdate} onChange={(date) => setBirthdate(date)} required dateFormat=\"yyyy-MM-dd\"\r\n                    peekNextMonth={true} showMonthDropdown={true} showYearDropdown={true} dropdownMode=\"select\" shouldCloseOnSelect={true} />\r\n                {/* <DatePicker name='birthdate{index}' id='birthdate{index}' selected={record.birthdate} required dateFormat=\"yyyy-MM-dd\"\r\n\t\t\t\t\t\t\tpeekNextMonth={true} showMonthDropdown={true} showYearDropdown={true} dropdownMode=\"select\" shouldCloseOnSelect={true} /> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}","// import './App.css';\r\nimport React, { Component } from 'react';\r\nimport HTMLParser from 'fast-html-parser';\r\nimport axios from \"axios\";\r\nimport * as emailjs from 'emailjs-com';\r\nimport DatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css'\r\nimport Record from './../../models/Record';\r\nimport TableChangeServiceView from './../../TableChangeServiceView.js'\r\nimport StrTable from '../StrTable/StrTable';\r\nimport { generateID, getDateFromFormat } from '../../models/utils'\r\nimport './Form.css'\r\n\r\nimport settings from '../../settings.json'\r\nimport { useParams } from 'react-router';\r\n\r\n\r\nclass Form extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.propsID = props.id;\r\n\t\t// console.log(props);\r\n\t\t// const params = new URLSearchParams(props.location.search);\r\n\t\tconst numRecords = [1, 2, 3, 4, 5, 6];\r\n\t\tconst isUpdate = props.update;\r\n\t\t// let isUpdate = params.get('isUpdate');\r\n\t\t// let cntPersons = params.get('cntPersons');\r\n\t\t// this case - update exists records in the table\r\n\t\tif (this.propsID) {\r\n\t\t\tthis.state = {\r\n\t\t\t\tidOrder: props.id,\r\n\t\t\t\trecords: [],\r\n\t\t\t\tgoogleTab: [],\r\n\t\t\t\tisTableFilled: false,\r\n\t\t\t\tisUpdate: true,\r\n\t\t\t\tmaxCountOfPersons: 50,\r\n\t\t\t\tregButton: false,\r\n\t\t\t\tregButtonCaption: \"√Ñndern\",\r\n\t\t\t\t// actualDate: new Date(params.get('date') + 'T00:00:00Z'),\r\n\t\t\t\t// the number for update\r\n\t\t\t\t// numberUpdate: params.get('number')\r\n\t\t\t};\r\n\t\t\t// set records to array for show data for update \r\n\t\t\t// for (let i = 0; i < cntPersons - 1; i++) {\r\n\t\t\t// \tnew Record().setRecord(params.get('firstname' + i + 1),\r\n\t\t\t// \t\tparams.get('lastname' + i + 1),\r\n\t\t\t// \t\tparams.get('phone' + i + 1),\r\n\t\t\t// \t\tparams.get('email' + i + 1),\r\n\t\t\t// \t\tparams.get('birhtday' + i + 1)\r\n\t\t\t// \t);\r\n\t\t\t// \tthis.state.records.push(Record);\r\n\t\t\t// }\r\n\r\n\t\t}\r\n\t\t// case adding data in the table (the first setting data)\r\n\t\telse {\r\n\t\t\tthis.state = {\r\n\t\t\t\tactualPersonNumber: 1,\r\n\t\t\t\tpersons: [],\r\n\t\t\t\trecords: [new Record()],\r\n\t\t\t\tredirect: false,\r\n\t\t\t\tgoogleTab: [],\r\n\t\t\t\tisTableFilled: false,\r\n\t\t\t\tisUpdate: false,\r\n\t\t\t\tactualDate: new Date(),\r\n\t\t\t\tactualTime: '10-00',\r\n\t\t\t\tmaxCountOfPersons: 50,\r\n\t\t\t\tregButton: false,\r\n\t\t\t\tregButtonCaption: \"Anmelden\",\r\n\t\t\t\tidOrder: generateID(),\r\n\t\t\t};\r\n\t\t\t// this.state.records.push(new Record().createRecord('', '', '', '', new Date(), 'visible'));\r\n\t\t\t// for (let i = 1; i < 6; i++) {\r\n\t\t\t// \tthis.state.records.push(new Record().createRecord('', '', '', '', new Date(), 'hidden'));\r\n\t\t\t// }\r\n\t\t}\r\n\t\tthis.changeOfPersons = this.changeOfPersons.bind(this);\r\n\t\tthis.presetRegistryButton = this.presetRegistryButton.bind(this);\r\n\t\t// this.handleChangeDatePicker = this.handleChangeDatePicker.bind(this);\r\n\t\t// this.handleChangeFirstName = this.handleChangeFirstName.bind(this);\r\n\t\t// this.handleChangeLastName = this.handleChangeLastName.bind(this);\r\n\t\t// this.handleChangeEmail = this.handleChangeEmail.bind(this);\r\n\t\t// this.handleChangePhone = this.handleChangePhone.bind(this);\r\n\t\tthis.submitHandler = this.submitHandler.bind(this);\r\n\t\t// this.submitHandlerUpdate = this.handleChangePhone.bind(this);\r\n\t\t// this.submitHandlerAdd = this.submitHandlerAdd.bind(this);\r\n\t\t// this.getTdsOfTr = this.getTdsOfTr.bind(this);\r\n\t\t// this.getFirstDataFromTable = this.getFirstDataFromTable.bind(this);\r\n\t\tthis.tableChangeServiceView = new TableChangeServiceView();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (this.props.id) {\r\n\t\t\tconst ob = new TableChangeServiceView();\r\n\t\t\tob.getRecords(this.props.id)\r\n\t\t\t\t.then((result) => {\r\n\r\n\t\t\t\t\tconst records = result.data.map(element => new Record(element));\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\trecords: records,\r\n\t\t\t\t\t\tregEmail: result.data[0].emailOwner,\r\n\t\t\t\t\t\tidOrder: result.data[0].idOrder,\r\n\t\t\t\t\t\tactualDate: getDateFromFormat(result.data[0].actualDate),\r\n\t\t\t\t\t\tactualTime: result.data[0].actualTime\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => console.error(error));\r\n\t\t}\r\n\t}\r\n\tchangeOfPersons(event) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * for update mode only name of button setten, for adding mode analyse if it is possible enabling a button registry or not\r\n\t */\r\n\tpresetRegistryButton() {\r\n\t\tif ((!this.state.isUpdate) && (this.state.googleTab.length < this.state.maxCountOfPersons)) {\r\n\t\t\tthis.state.regButton = false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tsubmitHandler(event) {\r\n\t\tevent.preventDefault();\r\n\t\tif (this.propsID) {\r\n\t\t\tthis.submitHandlerUpdate();\r\n\t\t} else {\r\n\t\t\tthis.submitHandlerAdd();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * update a row with new variables\r\n\t */\r\n\tsubmitHandlerUpdate() {\r\n\t\tthis.tableChangeServiceView.deleteRecord(this.state.idOrder, 1).then(result =>\r\n\t\t\tthis.state.records.forEach((element, index) => this.tableChangeServiceView.insertRecord(element, 1, index + 1, this.state.idOrder, this.state.regEmail, this.state.actualDate, this.state.actualTime))\r\n\t\t);\r\n\r\n\t\tthis.state.records.forEach((element, index) => {\r\n\t\t\t//1. update records\r\n\t\t\temailjs.init(settings.emailjs.user_id);\r\n\t\t\tlet templateParams = {\r\n\t\t\t\tfrom_name: settings.emailjs.from_name,\r\n\t\t\t\tto_name: element.email,\r\n\t\t\t};\r\n\t\t\temailjs.send(\r\n\t\t\t\tsettings.emailjs.service_id,\r\n\t\t\t\tsettings.emailjs.templateUpdate_id,\r\n\t\t\t\ttemplateParams\r\n\t\t\t).then(\r\n\t\t\t\tfunction (response) {\r\n\t\t\t\t\tconsole.log(response.status, response.text);\r\n\t\t\t\t},\r\n\t\t\t\tfunction (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t);\r\n\r\n\t\tthis.setState({ redirect: true });\r\n\t}\r\n\r\n\r\n\tsubmitHandlerAdd() {\r\n\t\t//1. saving all records\r\n\t\tthis.state.records.forEach((element, index) => this.tableChangeServiceView.insertRecord(element, 1, index + 1, this.state.idOrder, this.state.regEmail, this.state.actualDate, this.state.actualTime))\r\n\t\t// this.tableChangeServiceView.insertRecord(this.state.records[0],1);\r\n\r\n\t\tthis.state.records.forEach((element, index) => {\r\n\t\t\temailjs.init(settings.emailjs.user_id);\r\n\t\t\tlet templateParams = {\r\n\t\t\t\tfrom_name: settings.emailjs.from_name,\r\n\t\t\t\tto_name: element.email,\r\n\t\t\t\tlink_delete: `${settings.site.host}#/delete/${this.state.idOrder}`,\r\n\t\t\t\tlink_update: `${settings.site.host}#/update/${this.state.idOrder}`,\r\n\t\t\t};\r\n\t\t\temailjs.send(\r\n\t\t\t\tsettings.emailjs.service_id,\r\n\t\t\t\tsettings.emailjs.templateAdd_id,\r\n\t\t\t\ttemplateParams\r\n\t\t\t).then(\r\n\t\t\t\tfunction (response) {\r\n\t\t\t\t\tconsole.log(response.status, response.text);\r\n\t\t\t\t},\r\n\t\t\t\tfunction (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.setState({ redirect: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\t// in this brunch need a show data from a filled before table and create a delete button^\r\n\t\tif (this.state.redirect) {\r\n\t\t\treturn (\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tbody>{this.state.googleTab.map(function (item, key) {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr key={key}>\r\n\t\t\t\t\t\t\t\t<td>{item[1].number}</td>\r\n\t\t\t\t\t\t\t\t<td>{item[1].firstname}</td>\r\n\t\t\t\t\t\t\t\t<td>{item[1].lastname}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t\t<button onClick={() => this.delAppointment()}>\r\n\t\t\t\t\t\tTermin stornieren\r\n\t\t    </button>\r\n\t\t\t\t</table>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//the first start of form - read a google table and show a registration form\r\n\t\t\t// this.getFirstDataFromTable();\r\n\t\t\tlet index = 0;\r\n\t\t\tconst items = this.state.records.map((record, index) =>\r\n\t\t\t\t<StrTable\r\n\t\t\t\t\trecord={record}\r\n\t\t\t\t\tindex={index}\r\n\t\t\t\t\tfuncCallBack={(result) => {\r\n\t\t\t\t\t\tthis.state.records[index] = result\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tdeleteRecord={() => {\r\n\t\t\t\t\t\t//copy array and delete current element\r\n\t\t\t\t\t\tconsole.log(this.state.records);\r\n\t\t\t\t\t\tconst newArray = [...this.state.records];\r\n\t\t\t\t\t\tnewArray.splice(index, 1);\r\n\r\n\t\t\t\t\t\tconsole.log(newArray);\r\n\t\t\t\t\t\tthis.setState({ records: newArray });\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t\treturn (\r\n\t\t\t\t<form className=\"regForm\" onSubmit={this.submitHandler}>\r\n\t\t\t\t\t<div class='sector'>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label> Termin der Lithurigie oder Dienst</label>\r\n\t\t\t\t\t\t\t<DatePicker selected={this.state.actualDate} onSelect={(date) => this.setState({ actualDate: date })} dateFormat=\"yyyy-MM-dd\" peekNextMonth={true}\r\n\t\t\t\t\t\t\t\tshowMonthDropdown={true} showYearDropdown={true} dropdownMode=\"select\" shouldCloseOnSelect={true} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div><label>Typ der Anbetung:</label></div>\r\n\t\t\t\t\t\t<label><input type='radio' id='prayer' name='prayer' value='1' onChange={() => this.setState({ actualTime: '10-00' })} checked={this.state.actualTime === '10-00'} />Morgen (um 10.00)</label><br></br>\r\n\t\t\t\t\t\t<label><input type='radio' id='prayer' name='prayer' value='2' onChange={() => this.setState({ actualTime: '18-00' })} checked={this.state.actualTime === '18-00'} />Abend (um 18.00)</label><br></br>\r\n\t\t\t\t\t\t{/* <label><input type=\"radio\" id='prayer' name='prayer' value='3' />Lithurgie</label><br></br> */}\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label>Anzahl der Personen: <b> {this.state.records.length}</b></label>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='reg-email'>\r\n\t\t\t\t\t\t\t<label className='' htmlFor='regemail'>Email for registration <span class=\"reqsymbol\">*</span></label>\r\n\t\t\t\t\t\t\t<input type='email' name=\"regemail\" id='regemail' className='input1' value={this.state.regEmail} onChange={(e) => this.setState({ regEmail: e.target.value })} required />\r\n\t\t\t\t\t\t\t{/* <input type='text' name=\"firstname{index}\" id='firstname{index}' className='input1' value={record.firstname} onChange={this.handleChangeFirstName} required /> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t{items}\r\n\t\t\t\t\t<button onClick={() => {\r\n\t\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t\t{ records: this.state.records.concat(new Record()) })\r\n\t\t\t\t\t}} >\r\n\t\t\t\t\t\tAdd 1 person\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t<button type=\"submit\">\r\n\t\t\t\t\t\t{this.state.regButtonCaption}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\nexport default Form;","import { useLocation, useParams } from \"react-router\";\r\nimport Form from \"../Form/Form\";\r\n\r\nexport default function FormUpdate(){\r\n    // const params = useParams();\r\n    // console.log(params);\r\n    //TODO: why doesn't work useParams???\r\n    const location = useLocation();\r\n    const id = location.hash.replace(\"#/update/\", \"\");\r\n    // console.log(\"update\");\r\n    // console.log(params);\r\n    // console.log(\"location\");\r\n    // console.log(location);\r\n    return <Form id={id} />\r\n}","import React, { Component } from 'react';\r\nimport TableChangeServiceView from '../../TableChangeServiceView.js';\r\nimport { useLocation } from 'react-router';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport default function DeleteOrder(params) {\r\n\tconst [deleted, setDeleted] = useState(false);\r\n\t// const params = useParams();\r\n\t// console.log(params);\r\n\t//TODO: why doesn't work useParams???\r\n\tconst location = useLocation();\r\n\tconst id = location.hash.replace(\"#/delete/\", \"\");\r\n\tuseEffect(() => {\r\n\t\tconst tableChangeServiceView = new TableChangeServiceView();\r\n\t\ttableChangeServiceView.deleteRecord(id, 1).then(\r\n\t\t\tsetDeleted(true))\r\n\t}, []);\r\n\r\n\tif (deleted) {\r\n\t\treturn <div>\r\n\t\t\tSehr geehrte Damen und Herren, den Termin war wegen Ihre Bitte gel√∂scht!\r\n\t\t</div>\r\n\t} \r\n\t\r\n\treturn  <div>.........</div> \r\n\r\n}\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport Form from './components/Form/Form.js';\nimport FormUpdate from './components/FormUpdate/FormUpdate.js';\n\nimport { BrowserRouter as Route, Switch, HashRouter } from \"react-router-dom\"\nimport DeleteOrder from './components/DeleteOrder/DeleteOrder';\n\nclass App extends Component {\n\n  render() {\n     const baseName = process.env.PUBLIC_URL;\n\n    return (\n      <div className=\"App\">\n        <HashRouter basename={baseName} >\n          <Switch>\n            <Route path=\"/\" exact >\n              <Form />\n            </Route>\n            <Route path=\"/update/:id\" exact>\n              <FormUpdate />\n            </Route>\n            <Route path=\"/delete/:id\" exact>\n              <DeleteOrder />\n            </Route>\n          </Switch>\n        </HashRouter>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}